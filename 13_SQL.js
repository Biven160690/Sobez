//SQL и  База данны ===================================================

 //База данных - организованная структура, предназначенная для хранения информации.
// Иными словами, база данных - это хранилище данных. 

// Система управления базами данных - это совокупность языковых и программных средств, которая осуществляет доступ к данным, позволяет их создавать, менять и удалять, обеспечивает безопасность данных и т.д

// SQL - structured query language - язык структурированных запросов, основной задачей которого является предоставление простого способа считывания и записи информации в базу данных

// Структура базы данных=============================================

// Иерархическая структура базы данных

// Это древовидная структура представления информации. Ее особенность в том, что каждый узел на более низком уровне имеет связь только с одним узлом на более высоком уровне. (не более одной родительской записи, но несколько подчиненных).

// Сетевая структура базы данных
// По сути, это расширение иерархической структуры. Все то же самое, но существует связь "многие ко многим". Сетевая структура базы данных позволяет нам добавить группы в наш пример. Недостатком сетевой модели является сложность разработки серьезных приложений. (может быть несколько родительских и несколько подчиненных записей)

// Реляционная структура базы данных
// Все данные представлены в виде простых таблиц, разбитых на строки и столбцы, на пересечении которых расположены данные. Эта структура стала настоящим прорывом в развитии баз данных.

// Типы данных =============================================
// 
// - числовые (INT, smallint, BigInt, float и т.д.)
// - дата и время (date, time, datetime и т.д.)
// - строковые типы данных (char, varchar(length) и т.д.)
// - бинарные типы данных и др.

//Делится на несколько частей ================================================

// 1. DDL (data defenition language) – язык описания данных create (создание данных ), alter(изменение данных ), drop(удаление данных )
// 2. DML (data manipulation language) – язык модификации данных incert, update, delete
// 3. DQL (data query language) – язык выборки select

//Типы связей в реляционной таблице ============================================

// 1. Один к одному – самая редко встречаемая связь, лучше 2 таблицы объединить в одну
// 2. Один ко многим
// 3. Многие ко многим (содержат связующие таблицы)



// Создание и удаление ======================================

// Для работы с таблици нужно зайти в ее!!!!!!!!!!!!!!
// 1. CREATE DATABASE namebase - создаем базу данных(локально)
// 2. CREATE TABLE nametableTABLE nametable - создаем таблицу
// 3. DROP DATABASE namebase - удаляем  базу данных
// 4. DROP TABLE nametable - удаляем таблицу.


// Работа с таблицами (добавление, удаление, приствоение новых данных и изменение типа и свойсств полей) ==========================================
 
// 1. ALTER TABLE nametable ADD namefield  + нужно доп.свойства(тип, длинна) - добавляем поле в таблицу
// 2. ALTER TABLE nametable DROP COLUM  namefield - удаляем нужное поле.
// 3. INSERT INTO nametable (указываем нужные поля к к оторым мы добавим данные) VALUES(пишем данные которые хотим присвоит, они будут соответсвовать порядку прописания полей) - добавляем данные в поля(так же можно добавлять по несколько строк; VALUES (одна строка данных),(втроря строка данных),)
// 4. UPDATE nametable SET namefield = 'НОВЫЕ ДАННЫЕ' WHERE пропишем условия где ужно изменит это поле(можно по id = 2 или id > 2) и AND  через этот оператор можно прописывать сколько нужно условий.. - изменяем значение поля.
// 5. DELETE FROM nametable WHERE указываем условия - удаляем нужное поле.
// 6. TRUNCATE nametable - очищает полностью таблицу.
// 7. ALTER TABLE nametable СHANGE namefield  ----первый параметр как будет назван этот файл, часто отсаеться тоже имя и мы его прост пропишем ворторно; а дальше указываем данные - измененние типа и свойств поля. 


// Индекс===========================================

//При использовании индекса поиск становаться более быстрым

// 1.CREATE INDEX nameindex ON nametable (к какому полю) - добавляем индекса. 
// 2.DROP INDEX nameindex ON nametable - удаление индекса. 


// Вывод всех данных ======================================

// 1. SELECT * FROM nametable - вывод всех данных этой таблицы
// 2. SELECT namefield  FROM nametable WHERE здесь укажем условия по которым нужно фильтровать; можем применять математические операторы id <> 5 это значит не равет 5 + AND + и добавляем новые условия;  так же есть OR он на подобии || в  js; есть IS он используеться если name IS NULL проверяет это равенство   - вывод нужных данных
// 3. SELECT DISTINCT namefield FROM nametable - выведет не повторяющее значения
// 4. SELECT * FROM nametable LIMIT 2  -  устанавливает лимит вывода данных(так же можно добавлять втрой аргумент в лимит и тогда он первый говорит с какого начинать а второй сколько вывести)
// 5. SELECT * FROM people ORDER BY(namefield) - сортировка в порядке возрастания / добавим в конец DESCT  будет по убыванию /
// 6. SELECT * FROM nametable WHERE namefield BETWEEN 5 AND  8 - выбирант диапозон 
// 7. SELECT * FROM nametable WHERE namefield IN( заданные параметры поиска) - выводит споле с по указанному фильтру
// 8 . SELECT * FROM nametable WHERE namefield LIKE " указывает по какому шаблону будет проискодить поиск; %текс% - выводим те поля у которых есть этот текст; "____.ru"  вывести поля которых содержит 4 символа; '[k-o]%' - вывести если есть буквы в указанном диапозоне; '_[^e-o]%' выывести если вторая буква названия не входит в диапозон; так же т% и %т вывести если есть в начале или в конце указанные буквы


// Ссылка и обеденение данных =====================================

//Когда создаем таблицу и в ней типа лежат ссылочные данные то должны мы прописать следующее:
// в самой таблице FOREIGH KEY namefield куда мы положим ссылочные данные REFERENCES nametable (поле к которому привязываемся)
// SELECT указываем поля которые будут выводиться/они будут из разных таблиц FROM nametable - откуда берем данные, какая таблица INNER JOIN nametable проверяем и объеденяем с этой таблицейб если следующие условия будут выполнены ON nametable.namefield = nametable.namefield  

// Псевданимы и функции ===============================================
//Для наглядного отображения данных
// SELECT namefield AS пишем псевданим FROM nametable - присваиваем псевданим

// SELECT CONCAT ("имя" - наш псевданим: name это наши поля, "День рождение: " birday - это наши поля) AS "Информация "  FROM nametable - объединяем роля в одну строку

//Можно добавлять много методов смотрим http://2sql.ru/functions/sql-count/
