//HTTP =============

// HTTP  –  это  протокол  прикладного  уровня  для  передачи данных от браузера к серверу и обратно.  HTTP сообщение обычно  передаются  между  сервером  и  браузером  через порт 80 или 443 при использовании Secure HTTP (HTTPS). 

//=====================Request===================


// 1. Метод HTTP.
// 2. Версия протокола.
// 3. Запрашиваемая страница.
// 4. Доменное имя сайта.
// 5. Тело.
// 6. Заголовок 


//==========================Response===================


// 1. Статус.
// 2. Описание статуса. 
// 3. Версия протокола.
// 4. Заголовок 
// 5. Тело ответа.
//========================================= Request ================================

// GET/default.aspxHTTP/1.1 
// Host:www.example.com 
 
 
// GET  –  HTTP  глагол  (метод  или  команда)  описывающая  действие,  которое  должен  выполнить 
// вебсервер. 
// /default.aspx – запрашиваемая на сервере страница. 
// HTTP/1.1 – версия протокола. 
// Host:www.example.com – заголовок. Доменное имя сайта, к которому выполняется запрос. Полезно в 
// том случае, если на сервере одновременно работает несколько веб приложений.


// =============================== Response ===============================

// Content-Type: text/html 
// Content-Length: 36 
// <html><body>Hello world</body></html> 
 
// HTTP/1.1 – версия протокола 
// 200 – status code 
// OK – описание статуса 
 
// Content-Type:  text/html–заголовок  с  MIME  типом  ответа.  Данное  значение  нужно  для  того,чтобы 
// браузер правильно интерпретировал данные полученные от сервера. 
// Content-Length: 36–размер тела ответа в байтах. 
// <html><body>Helloworld</body></html>–тело ответа. 


// ============================= Методы =====================================

// OPTIONS используется для описания параметров соединения с целевым ресурсом.
// GET  Получение данных с сервера.  
 //HEAD  Получение  метаданных  (заголовков)  ресурса.  При  данном  запросе  ресурс  не 
// возвращается.  
// POST  Отправка  данных  на  сервер  для  обработки.  Обычно  данные  введенные 
// пользователем в форму на странице.   
// PUT  Позволяет клиенту создать ресурс по указанному URL (создать файл на сервере).  
// DELETE  Удаление ресурса на сервере.  
// CONNECT  Команда для использования прокси серверами.  
// TRACE выполняет вызов возвращаемого тестового сообщения с ресурса.
// PATCH используется для частичного изменения ресурса.

// ==================================== GET vs POST ========================================

// 1 Способ передачи данных  Через URL/ В теле HTTP запроса
// 2 Объём передаваемых данных  Способен передать небольшое количество данных на сервер
// Есть ограничения на длину URL (2048 символов)/ Ограничений нет
// Способен передать большие объемы данныхПримечание: ограничения могут быть установлены сервером
// 3 Возможность отправки файлов  нет/ да
// 4 Возможность сохранения Запрос можно скопировать, сохранить (например, в закладках)/ Страницу, сгенерированную методом POST нельзя сохранить в закладки
// 5 Скорость обработки  за счет пустого тела запроса обработка быстра/ есть етло обрадотка долгая 
 // 6 Защита данных Данные видны всем в адресной строке браузера, истории браузера и т.п. в итоге данные не защищены/ Данные можно увидеть только с помощью инструментов разработчика, расширений браузера, специализированных программ
// 7 Поддержка соединения Не разрывает HTTP соединение (при включенном на сервере режиме keepAlive)/Разрывает HTTP соединение

// ======================== Группы статус кодов ================

// 1хх  Информационные 
// 2хх  Успешное завершение 
// 3хх  Команды перенаправлений 
// 4хх  Клиентские ошибки 
// 5хх  Серверные ошибки  




 








